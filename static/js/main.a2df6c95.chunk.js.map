{"version":3,"sources":["atoms.tsx","components/MakeCategories.tsx","components/CreateToDo.tsx","components/Todo.tsx","components/ToDoList.tsx","App.tsx","index.tsx","theme.ts"],"names":["toDoState","atom","key","default","toDoSelector","selector","get","toDos","category","selectOption","filter","toDo","cateTest","Box","styled","div","CateInput","input","props","theme","textColor","UlBox","ul","CateBtn","button","accentColor","DeleteBtn","MakeCategories","setCategory","useSetRecoilState","useRecoilState","cate","setCate","useForm","register","handleSubmit","setValue","onInput","event","target","value","deleteCategory","window","confirm","id","old","deletOne","findIndex","one","label","slice","onSubmit","cateInput","oldValue","Date","now","required","placeholder","map","cates","onClick","InputBox","InputBtn","CreateToDo","setToDos","categoryId","useRecoilValue","oldToDos","text","EachList","li","ListName","span","Buttons","Btn","DeleteButton","ToDo","cateTests","name","currentTarget","targetIndex","newToDo","console","log","Container","WebTitle","h1","ListTitle","h2","ListConainer","ToDoList","categoryName","GlobalStyle","createGlobalStyle","bgColor","App","todo","setTodo","setSeletBtn","useEffect","cateList","localStorage","getItem","todoList","JSON","parse","setItem","stringify","ReactDOM","render","StrictMode","cardBgColor","document","getElementById"],"mappings":"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","file":"static/js/main.a2df6c95.chunk.js","sourcesContent":["import { atom, selector } from \"recoil\";\n\nexport interface IToDo {\n    text: string;\n    id: number;\n    category:string;\n}\n\nexport const toDoState = atom<IToDo[]>({\n    key: \"toDo\",\n    default: [],\n});\n\nexport const toDoSelector = selector({\n    key: \"toDoSelector\",\n    get: ({ get }) => {\n    const toDos = get(toDoState);\n    const category = get(selectOption);\n    return toDos.filter((toDo) => toDo.category === category);\n    },\n});\n\n//creating-category\n\ninterface Icate {\n    label:string;\n    id:number;\n}\n\nexport const cateTest = atom<Icate[]>({\n    key: \"cateTest\",\n    default: [],\n});\n\n\nexport const selectOption = atom<string>({\n    key: \"selectOptions\",\n    default: \"\",\n});","import { useForm } from 'react-hook-form';\nimport { useRecoilState, useSetRecoilState } from 'recoil';\nimport styled from 'styled-components';\nimport { cateTest, selectOption } from '../atoms';\n\nconst Box = styled.div`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    /* background-color: darkgray; */\n`;\n\nconst CateInput = styled.input`\n    min-width: 200px;\n    padding: 5px 5px;\n    font-size: 1.1rem;\n    outline: none;\n    border: none;\n    color: ${(props)=>props.theme.textColor};\n    border-bottom: white solid 1px;\n    background-color: transparent;\n    margin-bottom: 20px;\n`;\n\nconst UlBox = styled.ul`\n    display: flex;\n    border-bottom: white dotted 2px;\n    margin-bottom: 30px;\n`;\n\nconst CateBtn = styled.button`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    font-size: 1.2rem;\n    border: none;\n    border-radius: 20px;\n    padding: 3px 10px;\n    margin: 6px 5px;\n    cursor: pointer;\n    :hover{\n        background-color: ${(props)=>props.theme.accentColor};\n    }\n`;\n\nconst DeleteBtn = styled.div`\n    font-size: 12px;\n    border: red solid 1px;\n    border-radius: 15px;\n    padding: 1px 5px 2px 5px;\n    margin-left: 15px;\n    color: red;\n    :hover{\n        background-color: red;\n        color: white;\n    }\n`;\n\ninterface ICateForm {\n    cateInput: string;\n}\nfunction MakeCategories (){\n    const setCategory = useSetRecoilState(selectOption);\n    const [cate, setCate] = useRecoilState(cateTest);\n    const {register, handleSubmit, setValue} = useForm<ICateForm>();\n    // const onInput = (event: React.FormEvent<HTMLSelectElement>) => { setCategory(event.currentTarget.value as any);\n    // // console.log(category);\n    // };\n    const onInput = (event:any) => { \n        setCategory(event.target.value);\n        };\n    const handleForm = ({cateInput}: ICateForm) =>{ \n        setCate((oldValue) =>[\n            { label:cateInput, id: Date.now() }, ...oldValue,]);\n            setCategory(cateInput);\n            setValue(\"cateInput\", \"\");\n            // console.log(cate);\n        }\n\n    const deleteCategory =(event :any)=>{\n        if(window.confirm(`are you sure you want to delete \"${event.target.id}\"?`)){\n            setCate((old)=> {\n                const deletOne = old.findIndex((one)=>one.label === event.target.id);\n                return [\n                    ...old.slice(0, deletOne),\n                    ...old.slice(deletOne+1)\n                ];\n            })\n        }else{\n            // if (catego === undefined){\n            //     console.log(\"nothing\",typeof cate[0]?.label);\n            //     setCategory(cate[0]?.label);\n            // }\n            // console.log(catego);\n            return;\n        }\n    }\n    return (\n        <Box>\n            <form onSubmit={handleSubmit(handleForm)}>\n                <CateInput {...register(\"cateInput\", {required:\"create a category\"})} placeholder='Create a category here' />\n            </form> \n            {/* <Selection value={category} onInput={onInput}>\n                {cate?.map((cates) => (\n                <option key={cates.id} value={cates.label}>{cates.label}</option>\n                ))}\n            </Selection> */}\n            <UlBox>\n                {cate?.map((cates) => (\n                <CateBtn key={cates.id} value={cates.label} onClick={onInput }>\n                    {cates.label}\n                    <DeleteBtn key={cates.id + `delete`} id={cates.label} onClick={deleteCategory}>x</DeleteBtn>\n                </CateBtn>\n                ))}\n            </UlBox>\n        </Box>\n    )\n}\n\nexport default MakeCategories;","import { useForm } from \"react-hook-form\";\nimport { useRecoilValue, useSetRecoilState } from \"recoil\";\nimport styled from 'styled-components';\nimport { selectOption, toDoState } from \"../atoms\";\n\nconst InputBox = styled.input`\n  font-size: 1rem;\n  outline: none;\n  padding: 5px 10px;\n  border: none;\n  /* border-bottom-left-radius: 15px; */\n`;\n\nconst InputBtn = styled.button`\n  font-size: 1rem;\n  padding: 5px 10px 5px 7px;\n  border: none;\n  border-left: dotted 1px gray;\n  border-top-right-radius:15px;\n  border-bottom-right-radius: 15px;\n  background-color: white;\n  color: lightgray;\n  cursor: pointer;\n  :hover{\n    background-color: lightgray;\n    color: gray;\n  }\n`;\n\ninterface IForm {\n  toDo: string;\n}\n\nfunction CreateToDo() {\n  const setToDos = useSetRecoilState(toDoState);\n  const categoryId = useRecoilValue(selectOption);\n  const { register, handleSubmit, setValue } = useForm<IForm>();\n  const handleValid = ({ toDo }: IForm) => {\n    setToDos((oldToDos) => [\n      { text: toDo, id: Date.now(), category:categoryId},\n      ...oldToDos,\n    ]);\n    setValue(\"toDo\", \"\");\n  };\n  return (\n    <form onSubmit={handleSubmit(handleValid)}>\n      <InputBox\n        {...register(\"toDo\", {\n          required: \"Please write a To Do\",\n        })}\n        placeholder=\"Write a to do\"\n      />\n      <InputBtn>+</InputBtn>\n    </form>\n  );\n}\n\nexport default CreateToDo;","import React from \"react\";\nimport { useRecoilState, useRecoilValue, useSetRecoilState } from \"recoil\";\nimport styled from 'styled-components';\nimport { cateTest, IToDo, selectOption, toDoState } from \"../atoms\";\n\nconst EachList = styled.li`\n    width: 100%;\n    display: flex;\n    justify-content: space-between;\n    list-style: none;\n    margin-top: 10px;\n    /* background-color: green; */\n`;\n\n\nconst ListName = styled.span`\n    font-size: 1.2rem;\n    font-weight: 500;\n    `;\n\nconst Buttons = styled.div`\n    display: flex;\n    align-items: center;\n    margin-left: 5px;\n`;\n\nconst Btn = styled.button`\n    border:none;\n    border-radius: 20px;\n    padding: 3px 8px;\n    margin-left: 5px;\n    color: gray;\n    background-color: rgba(0, 0, 0, 0.451);\n    cursor: pointer;\n    :hover{\n        background-color: ${(props)=> props.theme.accentColor};\n        color: ${(props)=>props.theme.textColor};\n    }\n`;\nconst DeleteButton = styled.button`\n    font-size: 12px;\n    border: rgba(255, 0, 0, 0.6) solid 1px;\n    border-radius: 15px;\n    padding: .5px 5px 2px 5.3px;\n    margin-left: 7px;\n    color: rgba(255, 0, 0, 0.6);\n    background-color: transparent;\n    cursor: pointer;\n    :hover{\n        background-color: red;\n        color: white;\n    }\n`;\n\nfunction ToDo({ text, category, id }: IToDo) {\n    const setToDos = useSetRecoilState(toDoState);\n    const [cateTests, setCateTests] = useRecoilState(cateTest);\n    const categoryId = useRecoilValue(selectOption);\n    const onClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n    const {\n        currentTarget: { name },\n    } = event;\n    setToDos((oldToDos) => {\n        const targetIndex = oldToDos.findIndex((toDo) => toDo.id === id);\n        const newToDo = { text, id, category: name as any };\n        return [\n        ...oldToDos.slice(0, targetIndex),\n        newToDo,\n        ...oldToDos.slice(targetIndex + 1),\n        ];\n    });\n    };\n    const DeleteTodo = (event:any) => {\n        console.log(event.target.name);\n        setToDos((old)=> {\n            const deletOne = old.findIndex((one)=>one.text === event.target.name);\n            return [\n                ...old.slice(0, deletOne),\n                ...old.slice(deletOne+1)\n            ];\n        })\n    }\n    return (\n    <EachList>\n        <ListName>{text}</ListName>\n        <Buttons>\n        {cateTests?.filter((cates)=>(\n            cates.label !== categoryId\n        )).map(cates => (\n            <Btn key={`${id}+${cates.label}`} \n                name={cates.label} \n                onClick={onClick}>\n                    {cates.label}\n                </Btn>\n        ))}\n        <DeleteButton name={text} onClick={DeleteTodo}>x</DeleteButton>\n        </Buttons>\n    </EachList>\n    );\n}\n\nexport default ToDo;","import React from \"react\";\nimport { useRecoilValue } from \"recoil\";\nimport styled from 'styled-components';\nimport { selectOption, toDoSelector } from \"../atoms\";\nimport MakeCategories from './MakeCategories';\nimport CreateToDo from \"./CreateToDo\";\nimport ToDo from \"./Todo\";\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  /* justify-content: center; */\n  padding: 100px 0px;\n`;\n\nconst WebTitle = styled.h1`\n  font-size: 2rem;\n  font-weight: 700;\n  margin-bottom: 30px;\n`;\n\nconst ListTitle = styled.h2`\n  font-size: 1.4rem;\n  font-weight: 500;\n  margin: 30px 0px 10px 0px;\n`;\n\nconst ListConainer = styled.ul`\n  margin-top: 15px;\n  /* background-color: green; */\n`;\n\nfunction ToDoList() {\n  const toDos = useRecoilValue(toDoSelector);\n  const categoryName = useRecoilValue(selectOption);\n  return (\n    <Container>\n      <WebTitle>ToDoList</WebTitle>\n      <MakeCategories/>\n      {/* <Separateline></Separateline> */}\n      <ListTitle>{categoryName}-List</ListTitle>\n      <CreateToDo />\n      <ListConainer>\n      {toDos?.map((toDo) => (\n        <ToDo key={toDo.id} {...toDo} />\n      ))}\n      </ListConainer>\n    </Container>\n  );\n\n}\n\nexport default ToDoList;","import { useEffect } from 'react';\nimport { useRecoilState, useSetRecoilState} from 'recoil';\nimport { createGlobalStyle } from \"styled-components\";\nimport { cateTest, selectOption, toDoState } from './atoms';\nimport ToDoList from \"./components/ToDoList\";\n\nconst GlobalStyle = createGlobalStyle`\n@import url('https://fonts.googleapis.com/css2?family=Source+Sans+Pro:wght@300;400&display=swap');\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, menu, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed,\nfigure, figcaption, footer, header, hgroup,\nmain, menu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n  margin: 0;\n  padding: 0;\n  border: 0;\n  font-size: 100%;\n  font: inherit;\n  vertical-align: baseline;\n}\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure,\nfooter, header, hgroup, main, menu, nav, section {\n  display: block;\n}\n/* HTML5 hidden-attribute fix for newer browsers */\n*[hidden] {\n    display: none;\n}\nbody {\n  line-height: 1;\n}\nmenu, ol, ul {\n  list-style: none;\n}\nblockquote, q {\n  quotes: none;\n}\nblockquote:before, blockquote:after,\nq:before, q:after {\n  content: '';\n  content: none;\n}\ntable {\n  border-collapse: collapse;\n  border-spacing: 0;\n}\n* {\n  box-sizing: border-box;\n}\nbody {\n  font-weight: 300;\n  font-family: 'Source Sans Pro', sans-serif;\n  background-color:${(props) => props.theme.bgColor};\n  color:${(props) => props.theme.textColor};\n  line-height: 1.2;\n}\na {\n  text-decoration:none;\n  color:inherit;\n}\n`;\n\n\nfunction App() {\n  const [cate, setCate] = useRecoilState(cateTest);\n  const [todo, setTodo] = useRecoilState(toDoState);\n  const setSeletBtn = useSetRecoilState(selectOption);\n  useEffect(()=>{\n    const cateList = localStorage.getItem(\"category\");\n    const todoList = localStorage.getItem(\"todoList\");\n    if(cateList === null){\n        return;\n    }else{\n      setCate(JSON.parse(cateList));\n      setSeletBtn(JSON.parse(cateList)[0]?.label);\n    }\n\n    if(todoList === null){\n      return;\n    }else{\n      setTodo(JSON.parse(todoList));\n    }\n\n    }, []);\n\n  useEffect(()=>{\n    localStorage.setItem(\"category\", JSON.stringify(cate));\n    localStorage.setItem(\"todoList\", JSON.stringify(todo));\n    // setSeletBtn(cate[0]?.label);\n  });\n\n  return (\n    <>\n      <GlobalStyle />\n      <ToDoList />\n    </>\n  );\n}\n\nexport default App;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { RecoilRoot } from \"recoil\";\nimport { ThemeProvider } from \"styled-components\";\nimport App from \"./App\";\nimport { darkTheme } from \"./theme\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <RecoilRoot>\n      <ThemeProvider theme={darkTheme}>\n        <App />\n      </ThemeProvider>\n    </RecoilRoot>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);","import { DefaultTheme } from \"styled-components\";\n\nexport const darkTheme: DefaultTheme = {\n  bgColor: \"#2f3640\",\n  textColor: \"white\",\n  accentColor: \"#9c88ff\",\n  cardBgColor: \"transparent\",\n};\n\nexport const lightTheme: DefaultTheme = {\n  bgColor: \"whitesmoke\",\n  textColor: \"black\",\n  accentColor: \"#9c88ff\",\n  cardBgColor: \"white\",\n};"],"sourceRoot":""}