{"version":3,"sources":["atoms.tsx","components/CreateToDo.tsx","components/Todo.tsx","components/ToDoList.tsx","App.tsx","index.tsx","theme.ts"],"names":["toDoState","atom","key","default","toDoSelector","selector","get","toDos","category","selectOption","filter","toDo","cateTest","CreateToDo","setToDos","useSetRecoilState","categoryId","useRecoilValue","useForm","register","handleSubmit","setValue","onSubmit","oldToDos","text","id","Date","now","required","placeholder","ToDo","cateTests","onClick","event","name","currentTarget","targetIndex","findIndex","newToDo","slice","cates","label","map","ToDoList","useRecoilState","setCategory","cate","setCate","cateInput","oldValue","value","onInput","GlobalStyle","createGlobalStyle","props","theme","bgColor","textColor","App","ReactDOM","render","StrictMode","accentColor","cardBgColor","document","getElementById"],"mappings":"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","file":"static/js/main.6f59084e.chunk.js","sourcesContent":["import { atom, selector } from \"recoil\";\n\nexport interface IToDo {\n    text: string;\n    id: number;\n    category:string;\n}\n\nexport const toDoState = atom<IToDo[]>({\n    key: \"toDo\",\n    default: [],\n});\n\nexport const toDoSelector = selector({\n    key: \"toDoSelector\",\n    get: ({ get }) => {\n    const toDos = get(toDoState);\n    const category = get(selectOption);\n    return toDos.filter((toDo) => toDo.category === category);\n    },\n});\n\n//creating-category\n\ninterface Icate {\n    label:string;\n    id:number;\n}\n\nexport const cateTest = atom<Icate[]>({\n    key: \"cateTest\",\n    default: [],\n});\n\n\nexport const selectOption = atom<string>({\n    key: \"selectOptions\",\n    default: \"\",\n});","import { useForm } from \"react-hook-form\";\nimport { useRecoilValue, useSetRecoilState } from \"recoil\";\nimport { selectOption, toDoState } from \"../atoms\";\n\ninterface IForm {\n  toDo: string;\n}\n\nfunction CreateToDo() {\n  const setToDos = useSetRecoilState(toDoState);\n  const categoryId = useRecoilValue(selectOption);\n  const { register, handleSubmit, setValue } = useForm<IForm>();\n  const handleValid = ({ toDo }: IForm) => {\n    setToDos((oldToDos) => [\n      { text: toDo, id: Date.now(), category:categoryId},\n      ...oldToDos,\n    ]);\n    setValue(\"toDo\", \"\");\n  };\n  return (\n    <form onSubmit={handleSubmit(handleValid)}>\n      <input\n        {...register(\"toDo\", {\n          required: \"Please write a To Do\",\n        })}\n        placeholder=\"Write a to do\"\n      />\n      <button>Add</button>\n    </form>\n  );\n}\n\nexport default CreateToDo;","import React from \"react\";\nimport { useRecoilValue, useSetRecoilState } from \"recoil\";\nimport { cateTest, IToDo, selectOption, toDoState } from \"../atoms\";\n\nfunction ToDo({ text, category, id }: IToDo) {\n    const setToDos = useSetRecoilState(toDoState);\n    const cateTests = useRecoilValue(cateTest);\n    const categoryId = useRecoilValue(selectOption);\n    const onClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n    const {\n        currentTarget: { name },\n    } = event;\n    setToDos((oldToDos) => {\n        const targetIndex = oldToDos.findIndex((toDo) => toDo.id === id);\n        const newToDo = { text, id, category: name as any };\n        return [\n        ...oldToDos.slice(0, targetIndex),\n        newToDo,\n        ...oldToDos.slice(targetIndex + 1),\n        ];\n    });\n    };\n    return (\n    <li>\n        <span>{text}</span>\n        {cateTests?.filter((cates)=>(\n            cates.label !== categoryId\n        )).map(cates => (\n            <button key={`${id}+${cates.label}`} \n                name={`${cates.label}`} \n                onClick={onClick}>\n                    {cates.label}\n                </button>\n        ))}\n\n    </li>\n    );\n}\n\nexport default ToDo;","import React from \"react\";\nimport { useForm } from 'react-hook-form';\nimport { useRecoilState, useRecoilValue } from \"recoil\";\nimport { cateTest, selectOption, toDoSelector } from \"../atoms\";\nimport CreateToDo from \"./CreateToDo\";\nimport ToDo from \"./Todo\";\ninterface ICateForm {\n  cateInput: string;\n}\nfunction ToDoList() {\n  const toDos = useRecoilValue(toDoSelector);\n  const [category, setCategory] = useRecoilState(selectOption);\n  const onInput = (event: React.FormEvent<HTMLSelectElement>) => {\n    setCategory(event.currentTarget.value as any);\n    // console.log(category);\n  };\n  //creating-category\n  const [cate, setCate] = useRecoilState(cateTest);\n  const {register, handleSubmit, setValue} = useForm<ICateForm>();\n  const handleForm = ({cateInput}: ICateForm) =>{\n    setCate((oldValue) =>[\n      { label:cateInput, id: Date.now() }, ...oldValue,\n    ]);\n    setCategory(cateInput);\n    setValue(\"cateInput\", \"\");\n    // console.log(cate);\n  }\n  return (\n    <div>\n      <form onSubmit={handleSubmit(handleForm)}>\n        <input {...register(\"cateInput\", {required:\"create a category\"})} placeholder='create a categoty' />\n      </form> \n      <select value={category} onInput={onInput}>\n        {cate?.map((cates) => (\n        <option key={cates.id} value={cates.label}>{cates.label}</option>\n        ))}\n      </select>\n{/* creating-category */}\n\n      <h1>To Dos</h1>\n      <hr />\n      <CreateToDo />\n      {toDos?.map((toDo) => (\n        <ToDo key={toDo.id} {...toDo} />\n      ))}\n    </div>\n  );\n\n}\n\nexport default ToDoList;","import { createGlobalStyle } from \"styled-components\";\nimport ToDoList from \"./components/ToDoList\";\n\nconst GlobalStyle = createGlobalStyle`\n@import url('https://fonts.googleapis.com/css2?family=Source+Sans+Pro:wght@300;400&display=swap');\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, menu, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed,\nfigure, figcaption, footer, header, hgroup,\nmain, menu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n  margin: 0;\n  padding: 0;\n  border: 0;\n  font-size: 100%;\n  font: inherit;\n  vertical-align: baseline;\n}\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure,\nfooter, header, hgroup, main, menu, nav, section {\n  display: block;\n}\n/* HTML5 hidden-attribute fix for newer browsers */\n*[hidden] {\n    display: none;\n}\nbody {\n  line-height: 1;\n}\nmenu, ol, ul {\n  list-style: none;\n}\nblockquote, q {\n  quotes: none;\n}\nblockquote:before, blockquote:after,\nq:before, q:after {\n  content: '';\n  content: none;\n}\ntable {\n  border-collapse: collapse;\n  border-spacing: 0;\n}\n* {\n  box-sizing: border-box;\n}\nbody {\n  font-weight: 300;\n  font-family: 'Source Sans Pro', sans-serif;\n  background-color:${(props) => props.theme.bgColor};\n  color:${(props) => props.theme.textColor};\n  line-height: 1.2;\n}\na {\n  text-decoration:none;\n  color:inherit;\n}\n`;\n\n\nfunction App() {\n  return (\n    <>\n      <GlobalStyle />\n      <ToDoList />\n    </>\n  );\n}\n\nexport default App;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { RecoilRoot } from \"recoil\";\nimport { ThemeProvider } from \"styled-components\";\nimport App from \"./App\";\nimport { darkTheme } from \"./theme\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <RecoilRoot>\n      <ThemeProvider theme={darkTheme}>\n        <App />\n      </ThemeProvider>\n    </RecoilRoot>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);","import { DefaultTheme } from \"styled-components\";\n\nexport const darkTheme: DefaultTheme = {\n  bgColor: \"#2f3640\",\n  textColor: \"white\",\n  accentColor: \"#9c88ff\",\n  cardBgColor: \"transparent\",\n};\n\nexport const lightTheme: DefaultTheme = {\n  bgColor: \"whitesmoke\",\n  textColor: \"black\",\n  accentColor: \"#9c88ff\",\n  cardBgColor: \"white\",\n};"],"sourceRoot":""}